@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
  font-family: halogen-light;
  src: url("https://use.typekit.net/af/e8ded5/00000000000000007735a389/30/a?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n3&v=3");
}

@font-face {
  font-family: halogen-light;
  src: url("https://use.typekit.net/af/e8ded5/00000000000000007735a389/30/a?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n3&v=3");
}

@font-face {
  font-family: halogen-regular;
  src: url("https://use.typekit.net/af/9470e7/00000000000000007735a397/30/a?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n4&v=3");
}

@font-face {
  font-family: halogen-bold;
  src: url("https://use.typekit.net/af/df64f2/00000000000000007735a379/30/a?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n9&v=3");
}

@font-face {
  font-family: halogen-black;
  src: url("https://use.typekit.net/af/e8ded5/00000000000000007735a389/30/a?primer=7cdcb44be4a7db8877ffa5c0007b8dd865b3bbc383831fe2ea177f62257a9191&fvd=n3&v=3");
}

/* * {
  border: 1px red solid;
} */

.dashed {
  background: linear-gradient(90deg, rgba(50, 50, 50, 0) 50%, transparent 0)
      repeat-x,
    linear-gradient(90deg, rgba(50, 50, 50, 0) 50%, transparent 0) repeat-x,
    linear-gradient(0deg, rgba(50, 50, 50, 0) 50%, transparent 0) repeat-y,
    linear-gradient(0deg, rgba(50, 50, 50, 0) 50%, transparent 0) repeat-y;
  background-size: 20px 2px, 20px 2px, 2px 20px, 2px 20px;
  background-position: 0 0, 0 100%, 0 0, 100% 0;
}

.dashed:hover {
  animation: showDash 1s forwards ease-in-out, animateDash 0.5s infinite linear;
}

@keyframes animateDash {
  100% {
    background-position: 20px 0, -20px 100%, 0 -20px, 100% 20px;
  }
}

@keyframes showDash {
  100% {
    background: linear-gradient(90deg, rgba(50, 50, 50, 1) 50%, transparent 0)
        repeat-x,
      linear-gradient(90deg, rgba(50, 50, 50, 1) 50%, transparent 0) repeat-x,
      linear-gradient(0deg, rgba(50, 50, 50, 1) 50%, transparent 0) repeat-y,
      linear-gradient(0deg, rgba(50, 50, 50, 1) 50%, transparent 0) repeat-y;
    background-size: 20px 2px, 20px 2px, 2px 20px, 2px 20px;
    background-position: 0 0, 0 100%, 0 0, 100% 0;
  }
}
:root {
  --foreground-rgb: 255, 255, 255;
  --background-start-rgb: 20, 10, 50;
  --background-end-rgb: 0, 0, 0;
  --buttonColourMiddle: #850101;
  --buttonColourEnd: #ffa600;
  --animTime: 1s;
  --buttonWidth: 120px;
  --buttonHeight: 40px;
}

/* start of button experiment */

/* black rectangle used to create main border effect */
.buttonBorder,
.buttonBlur {
  background: black;
  border-radius: 0.2rem;
  position: absolute;
  padding: 0.2em 1em;
  /* transform: translate(-50%, -50%); */
}

/* gradient text which achieves the effect by mask out a gradient, using the text */
.buttonText {
  background: linear-gradient(
    -180deg,
    transparent,
    var(--buttonColourMiddle),
    var(--buttonColourEnd)
  );
  background-size: 400% 400%;
  background-clip: text;
  color: #000;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation-name: textAnim;
  animation-timing-function: ease;
  animation-iteration-count: infinite;
  animation-duration: 1s;
  width: fit-content;
  margin: auto;
}

/* gradient used to create main border effect */
.buttonBorder::after,
.buttonBlur::after {
  content: "";
  position: absolute;
  z-index: -1;
  background: linear-gradient(
    -180deg,
    var(--buttonColourMiddle),
    var(--buttonColourEnd)
  );
  background-size: 400% 400%;
  animation: borderAnim var(--animTime) ease infinite;
  border-radius: inherit;
}

/* blurred border thickness */
.buttonBlur::after {
  inset: -5px;
}

/* unblurred border thickness */
.buttonBorder::after {
  inset: -2px;
}

/* wraps the buttonBlur and does the blurring */
.buttonBlurWrapper {
  filter: blur(8px);
  transform: translate3d(0, 100%, 0);
  /* this time it's necessary for the blur not to be clipped oddly. perhaps something to do with stacking contexts */
}

/* wraps the buttonBorder and applies blending to stop the black rectangle occluding the glow below */
.buttonBorderWrapper {
  mix-blend-mode: screen;
}

.glowButton {
  cursor: pointer;
}

/* need to make sure the black rect is in the same stacking context as the
as the gradient background/outline so that the blend mode can be applied
correctly. It works in Chrome just */

@keyframes borderAnim {
  0% {
    background-position: 0% 0%;
  }
  20% {
    background-position: 0% 0%;
  }
  50% {
    background-position: 0% 100%;
  }
  70% {
    background-position: 0% 100%;
  }
  100% {
    background-position: 0% 0%;
  }
}

@keyframes textAnim {
  0% {
    background-position: 0% 20%;
  }
  20% {
    background-position: 0% 20%;
  }
  50% {
    background-position: 0% 100%;
  }
  70% {
    background-position: 0% 100%;
  }
  100% {
    background-position: 0% 20%;
  }
}

/* end of button experiment */

.quarterSpinner {
  background-image: conic-gradient(
    #ffffff00 0turn,
    #ffffff00 0.25turn,
    #000000bb 0.25turn,
    #000000bb 0.5turn,
    #ffffff00 0.5turn,
    #ffffff00 0.75turn,
    #000000bb 0.75turn
  );
  background-size: 100% 100%;
  border-radius: 50%;
  animation-name: rotate;
  animation-duration: 1s;
  animation-delay: 0;
  animation-iteration-count: infinite;
  animation-direction: normal;
  animation-timing-function: linear;
  animation-fill-mode: forwards;
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}
